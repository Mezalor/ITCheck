[DEFAULT]
tp_name=TP de test
platform=Windows
max_time_import=1
module_import=random

##################
#	Exercice 1	 #
##################

[Question 1]
exercice=1
number=1
func_name=moyenne
scale=1


[Test]
command=moyenne([0,1,2,3])
result=3/2
max_time=0.5
point=2
level=fatal

[Test]
command=moyenne([k for k in range(101)])
result=50
strict=False
level=critic

[Test]
command=moyenne([1])
result=1
strict=False
level=critic

[Test]
command=abs(moyenne([1.1, 1.5, -2.5, 0.3])-0.1) < 10**(-10)
result=True
level=error
hidden=1

[Test]
command=abs(moyenne([1.5, 2.3, 7, 1/3, -8])-47/75) < 10**(-10)
result=True
level=error
hidden=2

[Test]
command=abs(moyenne([1.2,-1.2,2.4,5.7,-5.7,-2.4])) < 10**(-10)
result=True
level=error
hidden=2

[Test]
command=moyenne([])
level=info


[Question 2]
exercice=1
number=2
func_name=variance
scale=2


[Test]
command=variance([1])
result=0.
strict=False
level=fatal

[Test]
command=variance([k for k in range(101)])
result=850.
strict=True
level=critic

[Test]
command=variance([-k for k in range(20)])
result=33.25
level=critic
hidden=1

[Test]
command=abs(variance([1.2,-1.2,2.4,5.7,-5.7,-2.4])-13.23) < 10**(-10)
result=True
level=error
hidden=2

[Test]
command=variance([])
level=info

##################
#	Exercice 2	 #
##################

[Question 1 Ex 2]
exercice=2
number=1
func_name=tout_positif
scale=1

[Test]
command=tout_positif([-1, -2.5, -3])
result=False

[Test]
command=tout_positif([-1, 1, -3])
result=False
max_time=0.5

# En théorie il ne faudrait pas mettre un test level "error" avant un test "critic" et un test "critic" avant un test "fatal" pour ne pas avoir de surprise au niveau de la note à la question

[Test]
command=tout_positif([1, 2, -3])
result=False
max_time=0.5
level=warning

[Test]
command=tout_positif([1, -2, -3])
result=False
max_time=0.5
level=error

[Test]
command=tout_positif([1, -2, 3])
result=False
max_time=0.5
level=critic

[Test]
command=tout_positif([1, 2, 3])
result=True

[Test]
command=tout_positif([0])
result=True

[Test]
command=tout_positif([])
level=info


[Question 2 Ex 2]
exercice=2
number=2
func_name=tout_superieur
scale=2

[Test]
command=tout_superieur([1, 2, 3, 4], 0)
result=True

[Test]
command=tout_superieur([1, 2, 3, 4], 2)
result=False

[Test]
command=tout_superieur([-1, -2.5, 3, 4], -2.5)
result=True

[Test]
command=tout_superieur([1], 1.1)
result=False

[Test]
command=tout_superieur([-i for i in range(100)], -98.5)
result=False

[Test]
command=tout_superieur([], 5)
level=info


[Question 3 Ex 2]
exercice=2
number=3
func_name=existe_positif
scale=1

[Test]
command=existe_positif([1, 2, 3, 4])
result=True

[Test]
command=existe_positif([1, -2, 3, -4])
result=True

[Test]
command=existe_positif([-1.5, -2.5, -3.5, -4.5])
result=False
level=error

[Test]
command=existe_positif([-1, -2, 0, -3])
result=True
level=error

[Test]
command=existe_positif([0])
result=True
level=warning

[Test]
command=existe_positif([])
level=info

##################
#	Exercice 3	 #
##################

[Question 1 Ex 3]
exercice=2
number=3
func_name=duree_secondes
scale=2

[Test]
command=duree_secondes([0,0,0,30])
result=30

[Test]
command=duree_secondes([0,0,0,0])
result=0

[Test]
command=duree_secondes([1,0,0,0])
result=86400

[Test]
command=duree_secondes([1,1,1,1])
result=90061

[Test]
command=duree_secondes([0,0,-1,60])
result=0

[Test]
command=duree_secondes([0,2,0,0])
result=7200

##################
#	Exercice 4	 #
##################

[Question 1 Ex 4]
exercice=2
number=1
func_name=generation
scale=1


[Test]
command=generation(5)
result="AAAAA"
custom_var={"choice": "lambda s: 'A' if 'A' in s else None"}

[Test]
command=generation(5)
result="CCCCC"
custom_var={"choice": "lambda s: 'C' if 'A' in s else None"}

[Test]
command=generation(5)
result="TTTTT"
custom_var={"choice": "lambda s: 'T' if 'A' in s else None"}

[Test]
command=generation(5)
result="GGGGG"
custom_var={"choice": "lambda s: 'G' if 'A' in s else None"}

[Test]
command=generation(5)
result="AAAAA"
custom_var={"choice": "lambda s: 'Z' if len(s) != 4 else 'A'"}

[Test]
command=len(generation(121))
result=121

[Test]
command=generation(33)
level=info
