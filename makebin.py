import os
import re
import configparser as cp
import PyInstaller.__main__


class Counter:
    def __init__(self):
        self.count_Q = 0
        self.count_T = 0

    def increment_Q(self, match_obj):
        self.count_Q += 1
        return "[Q" + str(self.count_Q) + "]"

    def increment_T(self, match_obj):
        self.count_T += 1
        return "[T" + str(self.count_T) + "-Q" + str(self.count_Q) + "]"


c = Counter()

conf_str = ""

with open("config.ini") as config_file:
    for line in config_file:
        if re.search(r"^\[Q.*\]$", line) is not None:
            conf_str += re.sub(r"^\[Q.*\]$", c.increment_Q, line)
        else:
            conf_str += re.sub(r"^\[T.*\]$", c.increment_T, line)

config = cp.ConfigParser()
config.read_string(conf_str)

if "DEFAULT" not in config:
    config.add_section("DEFAULT")
if "tp_name" not in config["DEFAULT"]:
    config["DEFAULT"]["tp_name"] = "TP"
if ("platform" in config["DEFAULT"] and
        config["DEFAULT"]["platform"].lower() == "windows"):
    config["DEFAULT"]["platform"] = "Windows"
else:
    config["DEFAULT"]["platform"] = "Unix"
if "max_time_import" not in config["DEFAULT"]:
    config["DEFAULT"]["max_time_import"] = 2


with open("src/config.py", 'w') as config_src:
    config_src.write("# This file was automatically generated by makebin.py\n")
    config_src.write("import model as m\n")
    config_src.write("import controller as c\n")

    if "module_import" in config["DEFAULT"]:
        mod_list = config["DEFAULT"]["module_import"].replace(" ",
                                                              "").split(",")
        for mod in mod_list:
            config_src.write(f"import {mod}\n")

    config_src.write(f"session=m.Session('{config['DEFAULT']['tp_name']}')\n")

    if config["DEFAULT"]["platform"] == "Windows":
        cont = ["# import timeout_unix as to\n",
                "import timeout_windows as to\n"]
    else:
        cont = ["import timeout_unix as to\n",
                "# import timeout_windows as to\n"]

    with open("src/controller.py") as controller_src:
        cont = cont + controller_src.read().splitlines(True)[2:]
    with open("src/controller.py", 'w') as controller_src:
        controller_src.writelines(cont)

    for q in range(1, c.count_Q+1):

        conf_q = config["Q" + str(q)]
        func_name = conf_q["func_name"]
        if "number" in conf_q:
            number = conf_q["number"]
        else:
            number = -1
        if "exercice" in conf_q:
            exercice = conf_q["exercice"]
        else:
            exercice = ""
        if "name" in conf_q:
            name = conf_q["name"]
        else:
            name = ""
        if "scale" in conf_q:
            scale = conf_q["scale"]
        else:
            scale = -1

        config_src.write((f"session.add_question('{func_name}', '{number}', "
                          f"'{exercice}', '{name}', {scale})\n"))

        listq = [c[0] for c in config.items() if c[0].endswith("-Q" + str(q))]
        for test_label in listq:

            conf_t = config[test_label]
            command = conf_t["command"]
            if "result" in conf_t:
                result = conf_t["result"]
            else:
                result = None
            if "max_time" in conf_t:
                max_time = conf_t["max_time"]
            else:
                max_time = 1
            if "point" in conf_t:
                point = conf_t["point"]
            else:
                point = 1
            if "level" in conf_t:
                level = conf_t["level"]
            else:
                level = "critic"
            if "hidden" in conf_t:
                hidden = conf_t["hidden"]
            else:
                hidden = 0
            if "strict" in conf_t:
                strict = conf_t["strict"]
            else:
                strict = True
            if "custom_var" in conf_t:
                custom_var = conf_t["custom_var"]
            else:
                custom_var = "{}"

            config_src.write((f"session.add_test("
                              f"'''{command}''', '''{result}''', "
                              f"{max_time}, {point}, '{level}', {hidden}, "
                              f"{strict}, {custom_var}, {q-1})\n"))

    config_src.write((f"work = c.Work(session, max_time_import="
                      f"{config['DEFAULT']['max_time_import']})"))

PyInstaller.__main__.run([
    'src/view.py',
    '--onefile',
    '--windowed',
    '--clean'
])

os.remove("view.spec")
try:
    os.replace("dist/view.exe", "ITCheck.exe")
except FileNotFoundError:
    os.replace("dist/view", "ITCheck")
os.removedirs("dist")

for root, dirs, files in os.walk("build", topdown=False):
    for name in files:
        os.remove(os.path.join(root, name))
    for name in dirs:
        os.rmdir(os.path.join(root, name))
os.removedirs("build")
